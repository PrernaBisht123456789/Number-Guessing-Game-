#include <iostream>
using namespace std;

// Function prototypes
void initializeBoard(char board[3][3]);
void displayBoard(char board[3][3]);
bool checkWin(char board[3][3], char player);
bool checkDraw(char board[3][3]);
bool isValidMove(char board[3][3], int row, int col);
void switchPlayer(char &currentPlayer);

int main() {
    char board[3][3];
    char currentPlayer = 'X';
    bool gameActive = true;
    char playAgain;

    do {
        initializeBoard(board);
        displayBoard(board);

        while (gameActive) {
            int row, col;

            // Get current player's move
            cout << "Player " << currentPlayer << ", enter your move (row and column): ";
            cin >> row >> col;

            // Convert to zero-indexed
            row--;
            col--;

            // Check if move is valid
            if (!isValidMove(board, row, col)) {
                cout << "Invalid move! Try again." << endl;
                continue;
            }

            // Update board
            board[row][col] = currentPlayer;

            // Display updated board
            displayBoard(board);

            // Check for win
            if (checkWin(board, currentPlayer)) {
                cout << "Player " << currentPlayer << " wins!" << endl;
                gameActive = false;
                break;
            }

            // Check for draw
            if (checkDraw(board)) {
                cout << "It's a draw!" << endl;
                gameActive = false;
                break;
            }

            // Switch players
            switchPlayer(currentPlayer);
        }

        // Ask to play again
        cout << "Do you want to play again? (y/n): ";
        cin >> playAgain;
        if (playAgain == 'y' || playAgain == 'Y') {
            gameActive = true;
        }

    } while (playAgain == 'y' || playAgain == 'Y');

    cout << "Thanks for playing Tic-Tac-Toe!" << endl;

    return 0;
}

// Initialize the board with empty spaces
void initializeBoard(char board[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            board[i][j] = ' ';
        }
    }
}

// Display the current state of the board
void displayBoard(char board[3][3]) {
    cout << "-------------" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl << "-------------" << endl;
    }
}

// Check if the current player has won
bool checkWin(char board[3][3], char player) {
    // Check rows and columns
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) return true;
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) return true;
    }

    // Check diagonals
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) return true;
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) return true;

    return false;
}

// Check if the board is full (draw)
bool checkDraw(char board[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') return false;
        }
    }
    return true;
}

// Check if the move is valid
bool isValidMove(char board[3][3], int row, int col) {
    if (row < 0 || row >= 3 || col < 0 || col >= 3) return false; // Out of bounds
    if (board[row][col] != ' ') return false; // Cell already occupied
    return true;
}

// Switch between players
void switchPlayer(char &currentPlayer) {
    if (currentPlayer == 'X') currentPlayer = 'O';
    else currentPlayer='X';
}
